# -*- coding: utf-8 -*-
"""Mall Customer Segmentation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14jcsMyxZHhtXEuJqsv-UBUUTUBfZc8BF
"""



"""# Task
Analyze the customer data in "/content/Mall_Customers.csv" to identify distinct customer segments based on their purchasing behavior and demographics using K-Means clustering, and suggest targeted marketing strategies for each segment.

## Load data

### Subtask:
Load the customer data from the provided CSV file into a pandas DataFrame.

**Reasoning**:
Import the pandas library and load the data from the CSV file into a DataFrame.
"""

import pandas as pd

df = pd.read_csv('/content/Mall_Customers.csv')

"""**Reasoning**:
Display the first few rows of the DataFrame to verify the data has been loaded correctly.


"""

df.head()

"""## Explore data

### Subtask:
Display the first few rows, check the data types, and look for missing values.

**Reasoning**:
Display the first few rows, check data types, and check for missing values as per the instructions.
"""

display(df.head())
print(df.info())
print(df.isnull().sum())

"""## Handle missing values

### Subtask:
Address any missing data if necessary.

## Feature scaling

### Subtask:
Scale the relevant numerical features for clustering.

**Reasoning**:
Select the relevant numerical columns, instantiate and fit the StandardScaler, transform the data, and display the first few rows of the scaled data.
"""

from sklearn.preprocessing import StandardScaler

X = df[['Annual Income (k$)', 'Spending Score (1-100)']]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)
display(X_scaled_df.head())

"""## Determine optimal number of clusters

### Subtask:
Use a method like the Elbow Method to find the best number of clusters for K-Means.

**Reasoning**:
Implement the Elbow Method and Silhouette Score to find the optimal number of clusters and visualize the results.
"""

from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt

sse = []
silhouette_scores = []
k_range = range(1, 11)

for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(X_scaled_df)
    sse.append(kmeans.inertia_)
    if k > 1:
        score = silhouette_score(X_scaled_df, kmeans.labels_)
        silhouette_scores.append(score)

plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(k_range, sse, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters (k)')
plt.ylabel('SSE')
plt.xticks(k_range)
plt.grid(True)

plt.subplot(1, 2, 2)
plt.plot(range(2, 11), silhouette_scores, marker='o')
plt.title('Silhouette Score')
plt.xlabel('Number of clusters (k)')
plt.ylabel('Silhouette Score')
plt.xticks(range(2, 11))
plt.grid(True)

plt.tight_layout()
plt.show()

"""## Apply clustering

### Subtask:
Apply the K-Means algorithm with the optimal number of clusters to the scaled data.

**Reasoning**:
Apply the K-Means algorithm with 5 clusters to the scaled data and store the cluster labels.
"""

from sklearn.cluster import KMeans

kmeans_model = KMeans(n_clusters=5, random_state=42, n_init='auto')
kmeans_model.fit(X_scaled_df)
cluster_labels = kmeans_model.labels_

"""## Analyze clusters

### Subtask:
Add the cluster labels back to the original DataFrame and analyze the characteristics of each cluster (e.g., average age, spending score, annual income).

**Reasoning**:
Add the cluster labels to the original dataframe, group by cluster, and calculate the mean of relevant features to analyze cluster characteristics.
"""

df['Cluster'] = cluster_labels
cluster_characteristics = df.groupby('Cluster')[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].mean()
display(cluster_characteristics)

"""## Visualize clusters

### Subtask:
Create visualizations (e.g., scatter plots) to visualize the clusters based on selected features.

**Reasoning**:
Generate a scatter plot to visualize the clusters based on 'Annual Income (k$)' and 'Spending Score (1-100)', color-coding the points by the 'Cluster' column and adding appropriate labels, title, and legend.
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
scatter = plt.scatter(df['Annual Income (k$)'], df['Spending Score (1-100)'], c=df['Cluster'], cmap='viridis', s=50, alpha=0.8)
plt.title('Customer Clusters based on Income and Spending Score')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')

# Create legend
legend_labels = [f'Cluster {i}' for i in sorted(df['Cluster'].unique())]
plt.legend(handles=scatter.legend_elements()[0], labels=legend_labels, title='Clusters')

plt.grid(True)
plt.show()

"""## Summary:

### Data Analysis Key Findings

*   The dataset contains 200 entries and 5 columns: `CustomerID`, `Gender`, `Age`, `Annual Income (k$)`, and `Spending Score (1-100)`, with no missing values.
*   The Elbow Method and Silhouette Score analysis suggest that 5 is a suitable number of clusters for the customer data.
*   Applying K-Means clustering with 5 clusters revealed distinct customer segments based on `Annual Income (k$)` and `Spending Score (1-100)`.
*   Analysis of the cluster characteristics shows variations in average age, annual income, and spending score across the segments. For example:
    *   One cluster is characterized by relatively younger customers with high annual income and high spending scores.
    *   Another cluster consists of older customers with low income and low spending scores.
*   The scatter plot visualization clearly illustrates the separation of the 5 clusters based on `Annual Income (k$)` and `Spending Score (1-100)`.

### Insights or Next Steps

*   Based on the identified clusters, develop targeted marketing campaigns tailored to the specific characteristics and spending behaviors of each segment.
*   Further analyze the 'Gender' and 'Age' distribution within each cluster to refine the marketing strategies and personalize customer interactions.

"""